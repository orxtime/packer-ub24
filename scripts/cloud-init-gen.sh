#!/bin/bash

mkdir -p ./data
mkdir -p ./http

# mkpasswd install
if ! dpkg -s whois &>/dev/null; then
  apt-get update && apt-get install whois -y
fi

export USER="ubuntu"
export PASSWD=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13)
export PASSWD_HSH="$(mkpasswd --method=SHA-512 --rounds=4096 \"$PASSWD\")"

export VM_SETTINGS=$(./scripts/genn.sh)
export VM_NAME=$(echo $VM_SETTINGS | jq -r ".\"vmName\"")
export VM_SLUG=$(echo $VM_SETTINGS | jq -r ".\"vmSlug\"")
export VM_BUILD=$(date +"%Y-%m-%d %H:%M:%S")

export CREDENTIALS=$(jq -n --arg password "$PASSWD" --arg hash "$PASSWD_HSH" '{"password":$password, "hash":$hash}')
# echo $CREDENTIALS > ./data/credentials.json

echo "" > ./http/meta-data
cat <<EOF > ./http/user-data
#cloud-config
runcmd:
  - [eval, 'echo \$(cat /proc/cmdline) "autoinstall" > /root/cmdline']
  - [eval, 'mount -n --bind -o ro /root/cmdline /proc/cmdline']
  - [eval, 'snap restart subiquity.subiquity-server']
  - [eval, 'snap restart subiquity.subiquity-service']

autoinstall:
  version: 1

  # Updates from both the security and updates pockets are installed.
  # updates: all

  # default behavior
  locale: "en_US.UTF-8"

  # default behavior
  keyboard:
    layout: us
    variant: ""
    toggle: null

  # Set Timezone
  timezone: "Europe/Moscow"

  # Refresh to the latest snap built from the "main" subiquity branch
  # refresh-installer:
  #   update: true
  #   channel: latest/edge

  # Proxy
  # proxy: http://172.16.90.1:3128

  # Configure the initial user for the system.
  identity:
    hostname: $VM_SLUG
    password: "$PASSWD_HSH"
    username: $USER

  # Configure SSH for the installed system.
  ssh:
    # authorized_keys is empty
    authorized-keys: []
    allow-pw: true

    # authorized_keys is not empty
    # authorized-keys:
    #   # replace with the contents of the public key(s) as generated by
    #   # ssh-keygen or similar tools
    #   - ssh-ed25519 AAAAC3NzaC..6O8tvZobj user@host
    # allow-pw: false

    install-server: true

  # Shell commands to run after the installation has completed successfully and any updates and packages installed, just before the system reboots. The commands are run in the installer environment with the installed system mounted at /target. You can run curtin in-target -- $shell_command (with the version of Subiquity released with 20.04 GA, you need to specify this as curtin in-target --target=/target -- $shell_command) to run in the target system (similar to how plain in-target can be used in d-i preseed/late_command).
  late-commands:
    - curtin in-target -- mkdir -p /tmp/install-dpkg
    - curtin in-target -- wget https://github.com/xenserver/xe-guest-utilities/releases/download/v8.4.0/xe-guest-utilities_8.4.0-1_amd64.deb -O /tmp/install-dpkg/xe-guest-utilities_8.4.0-1_amd64.deb
    - curtin in-target -- dpkg -i /tmp/install-dpkg/xe-guest-utilities_8.4.0-1_amd64.deb
    - curtin in-target -- rm -rf /tmp/install-dpkg
    - curtin in-target -- systemctl enable xe-linux-distribution
EOF

jq -n \
  --arg name "$VM_NAME" \
  --arg slug "$VM_SLUG" \
  --arg build "$VM_BUILD" \
  --arg password "$PASSWD" \
  --arg hash "$PASSWD_HSH" \
'{"vmName":$name,"vmSlug":$slug,"vmBuild":$build,"vmUser":"ubuntu","vmPass":$password,"vmHash":$hash}' > ./data/vm.json
